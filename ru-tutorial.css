@charset "UTF-8"; 
 /*CSS-library:"Lucy Flash Drive" ("lfd")
- - - - - - - - 
tl dr: Вкратце, "Lucy- flash-drive" это:  1) хелперы для flexbox
(ie10+) сетки (с twitter-bootstrap/эльфийской нотацией) с различными полезными
дополнениями-хелперами и media вариациями,   2) база адаптивных микро-css-
помощников, которые можно изменять/добавлять в процессе разработки веб-продукта.
3) подход в организации css-кода и оптимизации производственного процесса (Lucy
Way).

||||||||||||||||||||||||||||||
|| ||||| ||| |||    || ||| ||Flash
|| ||||| ||| ||| |||||| | |||||| |
|| ||||| ||| ||| ||||||| ||||||| |
||    |||   ||||    |||| ||||Drive
||||||||||||||||||||||||||||||

    Наименование css-библиотеки "Lucy-flash-drive" (в рамках подхода  к жизни "Lucy-
Way" (прямо здесь и сейчас и максимум до завтра) по почти одноименному фильму)
подразумевает, что ваш deadline уже наступил, но вы: 
    a) уже умеете творить чудеса; 
    b) очень злы;
    c) за считанные секунды можете менять цвет волос (это в
самом деле просто: достаточно поменять .old-hair {background: blonde} на .new-
hair {background: brunette}). Библиотека "Lucy-flash-drive" представлена в
"почти" неминифицированном варианте: "lucy-flash-drive.css" и в "почти"
минифицированном "lfd.css" (здесь все еще можно посмотреть/добавить названия
классов, но все "responsive" варианты минифицированы).

    Чтобы работать с "Lucy-flash-drive", все же придется подсматривать периодически 
в исходник либо как в справочник по "хелперам", либо чтобы добавить/поменять свой 
"почти" инлайн-класс.

    Для быстрой правки "общих хелперов" выделен отдельный блок "Helpers", а в конце
каждого media предполагается добавление своего микро-css. Блок "helpers"
предусматривает, что новые "помощники" будут добавляться в том числе уже "в
процессе". Для "хелперов сеток" выделен блок "Grids", который помогает создавать
адаптивные: "width" (предлагается через "df" и "f" создавать кастомные, в т.ч. в
px), "list", order"(предлагается дополнять по необходимости),
"vertical/horisontal align", "off-set".

    "Хелперы - это очень несемантичные, но очень удобные инструменты. Поэтому, они
"должны быть максимально быстрыми в использовании, но логичными и логично
"расширяемыми. Поэтому примеры: .ta-c {text-align: center} {display: none},
".mlr-a {margin-left:auto; margin-right:auto}. То есть первые буквы свойств и
"параметров - составляют имена. Достаточно знать css и вспоминая подставлять
"первые буквы, как это делается при autocomplete.

    В случае, если вы добавляете "комплекс своих хелперов и их имена совпадают (при 
разных задачах), предлагается "такую коллизию разрешать капсолоком, или префиксом...или 
пересмотреть свой "подход и плодить новые сущности только при непосредственном 
возникновении "проблемы.

    Все хелперы адаптивны и работают в двух "точках преломления", но в пяти
вариантах @media (при этом, именование классов делается с "адаптивными"
дефисами): - small (до 639px), "адаптивными" дефис слева; - small + middle (до
1023px), "адаптивными" дефис слева и в середине; - middle (640px - 1023px),
"адаптивными" дефис в середине; - middle + large (от 640px), "адаптивными" дефис
в середине и справа; - large (от 1024px)), "адаптивными" дефис справа.

Например: .d-n {display: none} работает так:
@media (min,max,all) {
- - - - - | - - - - - - - -|- - - - - - - -
0 < 639px | 640px < 1023px | 1024px < wrap
- - - - - | - - - - - - - -|- - - - - - - -
                 dn
              all media
- - - - - | - - - - - - - -|- - - - - - - -
      -dn |      d-n       | dn-
only small|  only medium   | only large 
- - - - - | - - - - - - - -|- - - - - - - -
                      -d-n |
     only small and medium |
- - - - - | - - - - - - - -|- - - - - - - -
          | d-n-
          | only medium and large
- - - - - | - - - - - - - - - - - - - - - -
};

* Стоит заметить, что flexbox-сетки "Lucy-flash-drive"- это не расширение
* возможностей "float-left", а "рамки" для ограничения бесконечности
* возможностей "flexbox" (имеется ввиду "дизайн через верстку"), которые можно
* обойти используя "df" и "f".

** Увеличение специфичности с помощью "!important" объясняется тем, что для
изменения стиля лучше сначала удалить класс "хелпера" из html элемента, а только
после этого назначать ему другой стиль. */
